import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg


def grayscale(img):
    return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    
def canny(img, low_threshold, high_threshold):
    return cv2.Canny(img, low_threshold, high_threshold)

def gaussian_blur(img, kernel_size):
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 1)


img = mpimg.imread("./test9.jpg")
gray = gaussian_blur(img, 5)
gray = grayscale(gray)
cny =canny(img,30,200)
kernel = np.ones((3,3),np.uint8)
plt.imshow(cny)
plt.show()
cny = cv2.dilate(cny,kernel,iterations = 1)
plt.imshow(cny)
plt.show()
contours, _ = cv2.findContours(cny.copy(),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

contours = sorted(contours, key = cv2.contourArea, reverse = True)  #to limit, add [:20] to the end of the array

bankcard=None
# loop over our contours
for c in contours:
	# approximate the contour
	peri = cv2.arcLength(c, True)
	approx = cv2.approxPolyDP(c, 0.02 * peri, True)
 
	# if our approximated contour has four points, then
	# we can assume that we have found our screen
	if len(approx) == 4:
		bankcard = approx
		break
cv2.drawContours(img, bankcard, -1, (0,255,0), 3)
plt.imshow(img)
plt.show()


def four_point_transform(image, pts):
	# obtain a consistent order of the points and unpack them
	# individually
	print("pts:",pts)
	#rect = order_points(pts)
	rect=np.array([pts[0,0],pts[3,0],pts[2,0],pts[1,0]], dtype = "float32")
	(tl, tr, br, bl) = rect
	print("rect:",rect)
	# compute the width of the new image, which will be the
	# maximum distance between bottom-right and bottom-left
	# x-coordiates or the top-right and top-left x-coordinates
	widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
	widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
	maxWidth = max(int(widthA), int(widthB))
 
	# compute the height of the new image, which will be the
	# maximum distance between the top-right and bottom-right
	# y-coordinates or the top-left and bottom-left y-coordinates
	heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
	heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
	maxHeight = max(int(heightA), int(heightB))
 
	# now that we have the dimensions of the new image, construct
	# the set of destination points to obtain a "birds eye view",
	# (i.e. top-down view) of the image, again specifying points
	# in the top-left, top-right, bottom-right, and bottom-left
	# order
	dst = np.array([
		[0, 0],
		[maxWidth - 1, 0],
		[maxWidth - 1, maxHeight - 1],
		[0, maxHeight - 1]], dtype = "float32")
 
	# compute the perspective transform matrix and then apply it
	M = cv2.getPerspectiveTransform(rect, dst)
	warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))
 
	# return the warped image
	return warped

wrap=four_point_transform(img,bankcard)

plt.imshow(wrap)
plt.show()
